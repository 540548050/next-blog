{"version":3,"file":"9.9b23f7c0226d3002a731.hot-update.js","sources":["webpack:///components/Edit/index.js","webpack:///./node_modules/_html2markdown@1.1.0@html2markdown/html2markdown.js","webpack:///./node_modules/_html2markdown@1.1.0@html2markdown/index.js","webpack:///./node_modules/_html2markdown@1.1.0@html2markdown/markdown_html_parser.js"],"sourcesContent":["import React, {Component} from 'react';\nimport {connect} from 'react-redux';\n\nimport {Row, Col} from 'antd';\n\nimport marked from 'marked'\nimport hljs from 'highlight.js';\nimport html2markdown from 'html2markdown';\n\n\nhljs.configure({\n  tabReplace: '  ',\n  classPrefix: 'hljs-',\n  languages: ['CSS', 'HTML, XML', 'JavaScript', 'PHP', 'Python', 'Stylus', 'TypeScript', 'Markdown']\n})\nmarked.setOptions({\n  highlight: (code) => hljs.highlightAuto(code).value,\n  gfm: true,\n  tables: true,\n  breaks: false,\n  pedantic: false,\n  sanitize: true,\n  smartLists: true,\n  smartypants: false\n});\n\nclass Edit extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      previewContent: '',\n      aceBoxH: null\n\n    }\n\n    this.cacheValue()\n    this.containerScroll = this.containerScroll.bind(this)\n    this.onContentChange = this.onContentChange.bind(this)\n  }\n\n  componentWillMount() {\n    const {editCont=''} = this.props;\n\n    this.setState({\n      previewContent:decodeURIComponent(editCont)\n    })\n  }\n  componentDidMount() {\n    this.setState({\n      aceBoxH: document.documentElement.clientHeight - document.querySelector('.editor-main-a').offsetHeight + 'px'\n    })\n  }\n\n  cacheValue() {\n    this.currentTabIndex = 1\n    this.hasContentChanged = false\n    this.scale = 1\n  }\n\n  setCurrentIndex(index) {\n    this.currentTabIndex = index\n  }\n\n  containerScroll(e) {\n    this.hasContentChanged && this.setScrollValue()\n    if (this.currentTabIndex === 1) {\n      this.previewContainer.scrollTop = this.editContainer.scrollTop * this.scale\n    } else {\n      this.editContainer.scrollTop = this.previewContainer.scrollTop / this.scale\n    }\n  }\n\n  onContentChange(e) {\n    let markCont=marked(e.target.innerText)\n    const {handleChangeMarkEdit} = this.props;\n    handleChangeMarkEdit(markCont)\n    this.setState({\n      previewContent: markCont\n    })\n    !this.hasContentChanged && (this.hasContentChanged = true)\n  }\n\n  setScrollValue() {\n    // 设置值，方便 scrollBy 操作\n    this.scale = (this.previewWrap.offsetHeight - this.previewContainer.offsetHeight) / (this.editWrap.offsetHeight - this.editContainer.offsetHeight)\n    this.hasContentChanged = false\n  }\n\n  render() {\n\n    let state = this.state\n    return (\n      <div>\n        <div className=\"editor-main-a\" style={{height: state.aceBoxH}}\n             key='main'>\n          <Row>\n            <Col span={12}>\n              <div style={{height: state.aceBoxH}}>\n                <div className=\"  content-edit\" onMouseOver={this.setCurrentIndex.bind(this, 1)}\n                     onScroll={this.containerScroll} ref={node => this.editContainer = node}>\n                  <div contentEditable=\"plaintext-only\"\n                       className=\"common-wrapper \" onInput={this.onContentChange}\n                       ref={node => this.editWrap = node}></div>\n                </div>\n              </div>\n            </Col>\n            <Col span={12}>\n              <div>\n                <div className=\"  content-edit\" ref={node => this.previewContainer = node}\n                     onMouseOver={this.setCurrentIndex.bind(this, 2)} onScroll={this.containerScroll}>\n                  <div className=\" common-wrapper\" ref={node => this.previewWrap = node}\n                       dangerouslySetInnerHTML={{__html: state.previewContent}}></div>\n                </div>\n              </div>\n            </Col>\n          </Row>\n\n        </div>\n        <style jsx>{`\n        .content-edit{\n          max-height:600px;\n          height:600px;\n          overflow-y:scroll;\n          border: 1px solid #ddd;\n          border-top:none;\n        }\n.editor-main-a  .common-wrapper {\n  padding: 20px;\n  min-height: 100%;\n  outline: none;\n}\n\n\n        `}</style>\n      </div>\n\n    );\n  }\n\n}\n\nexport default connect()(Edit);\n\n\n// WEBPACK FOOTER //\n// components/Edit/index.js","/**\n * html2markdown - An HTML to Markdown converter.\n *\n * This implementation uses HTML or DOM parsing for conversion. Parsing code was\n * abstracted out in a parsing function which should be easy to remove in favor\n * of other parsing libraries.\n *\n * Converted MarkDown was tested with ShowDown library for HTML rendering. And\n * it tries to create MarkDown that does not confuse ShowDown when certain\n * combination of HTML tags come together.\n *\n * @author Himanshu Gilani\n * @author Kates Gasis (original author)\n *\n */\n\n/**\n * html2markdown\n * @param html - html string to convert\n * @return converted markdown text\n */\n\n/*\n Universal JavaScript Module, supports AMD (RequireJS), Node.js, and the browser.\n https://gist.github.com/kirel/1268753\n*/\n\n(function (name, definition) {\n  if (typeof define === 'function') { // AMD\n    define(definition);\n  } else if (typeof module !== 'undefined' && module.exports) { // Node.js\n    module.exports = definition();\n  } else { // Browser\n    var theModule = definition(), global = this, old = global[name];\n    theModule.noConflict = function () {\n      global[name] = old;\n      return theModule;\n    };\n    global[name] = theModule;\n  }\n})('html2markdown', function() {\n\nfunction trim(value) {\n\treturn value.replace(/^\\s+|\\s+$/g,\"\");\n}\n\nfunction endsWith(value, suffix) {\n  return value.match(suffix+\"$\") == suffix;\n}\n\nfunction startsWith(value, str) {\n\treturn value.indexOf(str) == 0;\n}\n\nfunction html2markdown(html, opts) {\n\topts = opts || {};\n\n\tvar nodeList = [];\n\tvar listTagStack = [];\n\tvar linkAttrStack = [];\n\tvar blockquoteStack = [];\n\tvar preStack = [];\n\tvar codeStack = [];\n\tvar links = [];\n\tvar inlineStyle = opts['inlineStyle'] || false;\n\tvar parser = opts['parser'];\n\tvar markdownTags = {\n\t\t\"hr\": \"- - -\\n\\n\",\n\t\t\"br\": \"  \\n\",\n\t\t\"title\": \"# \",\n\t\t\"h1\": \"# \",\n\t\t\"h2\": \"## \",\n\t\t\"h3\": \"### \",\n\t\t\"h4\": \"#### \",\n\t\t\"h5\": \"##### \",\n\t\t\"h6\": \"###### \",\n\t\t\"b\": \"**\",\n\t\t\"strong\": \"**\",\n\t\t\"i\": \"_\",\n\t\t\"em\": \"_\",\n\t\t\"dfn\": \"_\",\n\t\t\"var\": \"_\",\n\t\t\"cite\": \"_\",\n\t\t\"span\": \" \",\n\t\t\"ul\": \"* \",\n\t\t\"ol\": \"1. \",\n\t\t\"dl\": \"- \",\n\t\t\"blockquote\": \"> \"\n\t};\n\n\tif(!parser && typeof markdownDOMParser !== 'undefined')\n\t\tparser = markdownDOMParser;\n\n\tfunction getListMarkdownTag() {\n\t\tvar listItem = \"\";\n\t\tif(listTagStack) {\n\t\t\tfor ( var i = 0; i < listTagStack.length - 1; i++) {\n\t\t\t\tlistItem += \"  \";\n\t\t\t}\n\t\t}\n\t\tlistItem += peek(listTagStack);\n\t\treturn listItem;\n\t}\n\n\tfunction convertAttrs(attrs) {\n\t\tvar attributes = {};\n\t\tfor(var k in attrs) {\n\t\t\tvar attr = attrs[k];\n\t\t\tattributes[attr.name] = attr;\n\t\t}\n\t\treturn attributes;\n\t}\n\n\tfunction peek(list) {\n\t\tif(list && list.length > 0) {\n\t\t\treturn list.slice(-1)[0];\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tfunction peekTillNotEmpty(list) {\n\t\tif(!list) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tfor(var i = list.length - 1; i>=0; i-- ){\n\t\t\tif(list[i] != \"\") {\n\t\t\t\treturn list[i];\n\t\t\t}\n\t\t}\n\t\treturn \"\";\n\t}\n\n\tfunction removeIfEmptyTag(start) {\n\t\tvar cleaned = false;\n\t\tif(start == peekTillNotEmpty(nodeList)) {\n\t\t\twhile(peek(nodeList) != start) {\n\t\t\t\tnodeList.pop();\n\t\t\t}\n\t\t\tnodeList.pop();\n\t\t\tcleaned = true;\n\t\t}\n\t\treturn cleaned;\n\t}\n\n\tfunction sliceText(start) {\n\t\tvar text = [];\n\t\twhile(nodeList.length > 0 && peek(nodeList) != start) {\n\t\t\tvar t = nodeList.pop();\n\t\t\ttext.unshift(t);\n\t\t}\n\t\treturn text.join(\"\");\n\t}\n\n\tfunction block(isEndBlock) {\n\t\tvar lastItem = nodeList.pop();\n\t\tif (!lastItem) {\n\t\t\treturn;\n\t\t}\n\n\t\tif(!isEndBlock) {\n\t\t\tvar block;\n\t\t\tif(/\\s*\\n\\n\\s*$/.test(lastItem)) {\n\t\t\t\tlastItem = lastItem.replace(/\\s*\\n\\n\\s*$/, \"\\n\\n\");\n\t\t\t\tblock = \"\";\n\t\t\t} else if(/\\s*\\n\\s*$/.test(lastItem)) {\n\t\t\t\tlastItem = lastItem.replace(/\\s*\\n\\s*$/, \"\\n\");\n\t\t\t\tblock = \"\\n\";\n\t\t\t} else if(/\\s+$/.test(lastItem)) {\n\t\t\t\tblock = \"\\n\\n\";\n\t\t\t} else {\n\t\t\t\tblock = \"\\n\\n\";\n\t\t\t}\n\n\t\t\tnodeList.push(lastItem);\n\t\t\tnodeList.push(block);\n\t\t} else {\n\t\t\tnodeList.push(lastItem);\n\t\t\tif(!endsWith(lastItem, \"\\n\")) {\n\t\t\t\tnodeList.push(\"\\n\\n\");\n\t\t\t}\n\t\t}\n \t}\n\n\tfunction listBlock() {\n\t\tif(nodeList.length > 0) {\n\t\t\tvar li = peek(nodeList);\n\n\t\t\tif(!endsWith(li, \"\\n\")) {\n\t\t\t\tnodeList.push(\"\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tnodeList.push(\"\\n\");\n\t\t}\n\t}\n\n\tparser(html,{\n\t\tstart: function(tag, attrs, unary) {\n\t\t\ttag = tag.toLowerCase();\n\n\t\t\tif(unary && (tag != \"br\" && tag != \"hr\" && tag != \"img\")) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\tswitch (tag) {\n\t\t\tcase \"br\":\n\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\tbreak;\n\t\t\tcase \"hr\":\n\t\t\t\tblock();\n\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\tbreak;\n\t\t\tcase \"title\":\n\t\t\tcase \"h1\":\n\t\t\tcase \"h2\":\n\t\t\tcase \"h3\":\n\t\t\tcase \"h4\":\n\t\t\tcase \"h5\":\n\t\t\tcase \"h6\":\n\t\t\t\tblock();\n\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\tbreak;\n\t\t\tcase \"b\":\n\t\t\tcase \"strong\":\n\t\t\tcase \"i\":\n\t\t\tcase \"em\":\n\t\t\tcase \"dfn\":\n\t\t\tcase \"var\":\n\t\t\tcase \"cite\":\n\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\tbreak;\n\t\t\tcase \"code\":\n\t\t\tcase \"span\":\n\t\t\t\tif(preStack.length > 0)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t} else if(! /\\s+$/.test(peek(nodeList))) {\n\t\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"p\":\n\t\t\tcase \"div\":\n\t\t\t//case \"td\":\n\t\t\t\tblock();\n\t\t\t\tbreak;\n\t\t\tcase \"ul\":\n\t\t\tcase \"ol\":\n\t\t\tcase \"dl\":\n\t\t\t\tlistTagStack.push(markdownTags[tag]);\n\t\t\t\t// lists are block elements\n\t\t\t\tif(listTagStack.length > 1) {\n\t\t\t\t\tlistBlock();\n\t\t\t\t} else {\n\t\t\t\t\tblock();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"li\":\n\t\t\tcase \"dt\":\n\t\t\t\tvar li = getListMarkdownTag();\n\t\t\t\tnodeList.push(li);\n\t\t\t\tbreak;\n\t\t\tcase \"a\":\n\t\t\t\tvar attribs = convertAttrs(attrs);\n\t\t\t\tlinkAttrStack.push(attribs);\n\t\t\t\tnodeList.push(\"[\");\n\t\t\t\tbreak;\n\t\t\tcase \"img\":\n\t\t\t\tvar attribs = convertAttrs(attrs);\n\t\t\t\tvar alt, title, url;\n\n\t\t\t\tattribs[\"src\"] ? url = attribs[\"src\"].value : url = \"\";\n\t\t\t\tif(!url) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tattribs['alt'] ? alt = trim(attribs['alt'].value) : alt = \"\";\n\t\t\t\tattribs['title'] ? title = trim(attribs['title'].value) : title = \"\";\n\n\t\t\t\t// if parent of image tag is nested in anchor tag use inline style\n\t\t\t\tif(!inlineStyle && !startsWith(peekTillNotEmpty(nodeList), \"[\")) {\n\t\t\t\t\tvar l = links.indexOf(url);\n\t\t\t\t\tif(l == -1) {\n\t\t\t\t\t\tlinks.push(url);\n\t\t\t\t\t\tl=links.length-1;\n\t\t\t\t\t}\n\n\t\t\t\t\tblock();\n\t\t\t\t\tnodeList.push(\"![\");\n\t\t\t\t\tif(alt!= \"\") {\n\t\t\t\t\t\tnodeList.push(alt);\n\t\t\t\t\t} else if (title != null) {\n\t\t\t\t\t\tnodeList.push(title);\n\t\t\t\t\t}\n\n\t\t\t\t\tnodeList.push(\"][\" + l + \"]\");\n\t\t\t\t\tblock();\n\t\t\t\t} else {\n\t\t\t\t\t//if image is not a link image then treat images as block elements\n\t\t\t\t\tif(!startsWith(peekTillNotEmpty(nodeList), \"[\")) {\n\t\t\t\t\t\tblock();\n\t\t\t\t\t}\n\n\t\t\t\t\tnodeList.push(\"![\" + alt + \"](\" + url + (title ? \" \\\"\" + title + \"\\\"\" : \"\") + \")\");\n\n\t\t\t\t\tif(!startsWith(peekTillNotEmpty(nodeList), \"[\")) {\n\t\t\t\t\t\tblock(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"blockquote\":\n\t\t\t\t//listBlock();\n\t\t\t\tblock();\n\t\t\t\tblockquoteStack.push(markdownTags[tag]);\n\t\t\t\tbreak;\n\t\t\tcase \"pre\":\n\t\t\t\tblock();\n\t\t\t\tpreStack.push(true);\n\t\t\t\tnodeList.push(\"    \");\n\t\t\t\tbreak;\n\t\t\tcase \"table\":\n\t\t\t\tnodeList.push(\"<table>\");\n\t\t\t\tbreak;\n\t\t\tcase \"thead\":\n\t\t\t\tnodeList.push(\"<thead>\");\n\t\t\t\tbreak;\n\t\t\tcase \"tbody\":\n\t\t\t\tnodeList.push(\"<tbody>\");\n\t\t\t\tbreak;\n\t\t\tcase \"tr\":\n\t\t\t\tnodeList.push(\"<tr>\");\n\t\t\t\tbreak;\n\t\t\tcase \"td\":\n\t\t\t\tnodeList.push(\"<td>\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t},\n\t\tchars: function(text) {\n\t\t\tif(preStack.length > 0) {\n\t\t\t\ttext = text.replace(/\\n/g,\"\\n    \");\n\t\t\t} else if(trim(text) != \"\") {\n\t\t\t\ttext = text.replace(/\\s+/g, \" \");\n\n\t\t\t\tvar prevText = peekTillNotEmpty(nodeList);\n\t\t\t\tif(/\\s+$/.test(prevText)) {\n\t\t\t\t\ttext = text.replace(/^\\s+/g, \"\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tnodeList.push(\"\");\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//if(blockquoteStack.length > 0 && peekTillNotEmpty(nodeList).endsWith(\"\\n\")) {\n\t\t\tif(blockquoteStack.length > 0) {\n\t\t\t\tnodeList.push(blockquoteStack.join(\"\"));\n\t\t\t}\n\n\t\t\tnodeList.push(text);\n\t\t},\n\t\tend: function(tag) {\n\t\t\ttag = tag.toLowerCase();\n\n\t\tswitch (tag) {\n\t\t\tcase \"title\":\n\t\t\tcase \"h1\":\n\t\t\tcase \"h2\":\n\t\t\tcase \"h3\":\n\t\t\tcase \"h4\":\n\t\t\tcase \"h5\":\n\t\t\tcase \"h6\":\n\t\t\t\tif(!removeIfEmptyTag(markdownTags[tag])) {\n\t\t\t\t\tblock(true);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"p\":\n\t\t\tcase \"div\":\n\t\t\t//case \"td\":\n\t\t\t\twhile(nodeList.length > 0 && trim(peek(nodeList)) == \"\") {\n\t\t\t\t\tnodeList.pop();\n\t\t\t\t}\n\t\t\t\tblock(true);\n\t\t\t\tbreak;\n\t\t\tcase \"b\":\n\t\t\tcase \"strong\":\n\t\t\tcase \"i\":\n\t\t\tcase \"em\":\n\t\t\tcase \"dfn\":\n\t\t\tcase \"var\":\n\t\t\tcase \"cite\":\n\t\t\t\tif(!removeIfEmptyTag(markdownTags[tag])) {\n\t\t\t\t\tnodeList.push(trim(sliceText(markdownTags[tag])));\n\t\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"a\":\n\t\t\t\tvar text = sliceText(\"[\");\n\t\t\t\ttext = text.replace(/\\s+/g, \" \");\n\t\t\t\ttext = trim(text);\n\n\t\t\t\tif(text == \"\") {\n\t\t\t\t\tnodeList.pop();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tvar attrs = linkAttrStack.pop();\n\t\t\t\tvar url;\n\t\t\t\tattrs[\"href\"] &&  attrs[\"href\"].value != \"\" ? url = attrs[\"href\"].value : url = \"\";\n\n\t\t\t\tif(url == \"\") {\n\t\t\t\t\tnodeList.pop();\n\t\t\t\t\tnodeList.push(text);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tnodeList.push(text);\n\n\t\t\t\tif(!inlineStyle && !startsWith(peek(nodeList), \"!\")){\n\t\t\t\t\tvar l = links.indexOf(url);\n\t\t\t\t\tif(l == -1) {\n\t\t\t\t\t\tlinks.push(url);\n\t\t\t\t\t\tl=links.length-1;\n\t\t\t\t\t}\n\t\t\t\t\tnodeList.push(\"][\" + l + \"]\");\n\t\t\t\t} else {\n\t\t\t\t\tif(startsWith(peek(nodeList), \"!\")){\n\t\t\t\t\t\tvar text = nodeList.pop();\n\t\t\t\t\t\ttext = nodeList.pop() + text;\n\t\t\t\t\t\tblock();\n\t\t\t\t\t\tnodeList.push(text);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar title = attrs[\"title\"];\n\t\t\t\t\tnodeList.push(\"](\" + url + (title ? \" \\\"\" + trim(title.value).replace(/\\s+/g, \" \") + \"\\\"\" : \"\") + \")\");\n\n\t\t\t\t\tif(startsWith(peek(nodeList), \"!\")){\n\t\t\t\t\t\tblock(true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"ul\":\n\t\t\tcase \"ol\":\n\t\t\tcase \"dl\":\n\t\t\t\tlistBlock();\n\t\t\t\tlistTagStack.pop();\n\t\t\t\tbreak;\n\t\t\tcase \"li\":\n\t\t\tcase \"dt\":\n\t\t\t\tvar li = getListMarkdownTag();\n\t\t\t\tif(!removeIfEmptyTag(li)) {\n\t\t\t\t\tvar text = trim(sliceText(li));\n\n\t\t\t\t\tif(startsWith(text, \"[![\")) {\n\t\t\t\t\t\tnodeList.pop();\n\t\t\t\t\t\tblock();\n\t\t\t\t\t\tnodeList.push(text);\n\t\t\t\t\t\tblock(true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnodeList.push(text);\n\t\t\t\t\t\tlistBlock();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"blockquote\":\n\t\t\t\tblockquoteStack.pop();\n\t\t\t\tbreak;\n\t\t\tcase \"pre\":\n\t\t\t\t//uncomment following experimental code to discard line numbers when syntax highlighters are used\n\t\t\t\t//notes this code thorough testing before production user\n\t\t\t\t/*\n\t\t\t\tvar p=[];\n\t\t\t\tvar flag = true;\n\t\t\t\tvar count = 0, whiteSpace = 0, line = 0;\n\t\t\t\tconsole.log(\">> \" + peek(nodeList));\n\t\t\t\twhile(peek(nodeList).startsWith(\"    \") || flag == true)\n\t\t\t\t{\n\t\t\t\t\t//console.log('inside');\n\t\t\t\t\tvar text = nodeList.pop();\n\t\t\t\t\tp.push(text);\n\n\t\t\t\t\tif(flag == true && !text.startsWith(\"    \")) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tflag = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t//var result = parseInt(text.trim());\n\t\t\t\t\tif(!isNaN(text.trim())) {\n\t\t\t\t\t\tcount++;\n\t\t\t\t\t} else if(text.trim() == \"\"){\n\t\t\t\t\t\twhiteSpace++;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tline++;\n\t\t\t\t\t}\n\t\t\t\t\tflag = false;\n\t\t\t\t}\n\n\t\t\t\tconsole.log(line);\n\t\t\t\tif(line != 0)\n\t\t\t\t{\n\t\t\t\t\twhile(p.length != 0) {\n\t\t\t\t\t\tnodeList.push(p.pop());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t*/\n\t\t\t\tblock(true);\n\t\t\t\tpreStack.pop();\n\t\t\t\tbreak;\n\t\t\tcase \"code\":\n\t\t\tcase \"span\":\n\t\t\t\tif(preStack.length > 0)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t} else if(trim(peek(nodeList)) == \"\") {\n\t\t\t\t\tnodeList.pop();\n\t\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\t} else {\n\t\t\t\t\tvar text = nodeList.pop();\n\t\t\t\t\tnodeList.push(trim(text));\n\t\t\t\t\tnodeList.push(markdownTags[tag]);\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase \"table\":\n\t\t\t\tnodeList.push(\"</table>\");\n\t\t\t\tbreak;\n\t\t\tcase \"thead\":\n\t\t\t\tnodeList.push(\"</thead>\");\n\t\t\t\tbreak;\n\t\t\tcase \"tbody\":\n\t\t\t\tnodeList.push(\"</tbody>\");\n\t\t\t\tbreak;\n\t\t\tcase \"tr\":\n\t\t\t\tnodeList.push(\"</tr>\");\n\t\t\t\tbreak;\n\t\t\tcase \"td\":\n\t\t\t\tnodeList.push(\"</td>\");\n\t\t\t\tbreak;\n\t\t\tcase \"br\":\n\t\t\tcase \"hr\":\n\t\t\tcase \"img\":\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\t}, {\"nodesToIgnore\": [\"script\", \"noscript\", \"object\", \"iframe\", \"frame\", \"head\", \"style\", \"label\"]});\n\n\tif(!inlineStyle) {\n\t\tfor ( var i = 0; i < links.length; i++) {\n\t\t\tif(i == 0) {\n\t\t\t\tvar lastItem = nodeList.pop();\n\t\t\t\tnodeList.push(lastItem.replace(/\\s+$/g, \"\"));\n\t\t\t\tnodeList.push(\"\\n\\n[\" + i + \"]: \" + links[i]);\n\t\t\t} else {\n\t\t\t\tnodeList.push(\"\\n[\" + i + \"]: \" + links[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn nodeList.join(\"\");\n\n}\n\nreturn html2markdown;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_html2markdown@1.1.0@html2markdown/html2markdown.js\n// module id = ./node_modules/_html2markdown@1.1.0@html2markdown/html2markdown.js\n// module chunks = 9","var html2markdown = require('./html2markdown');\nvar htmlParser = require('./markdown_html_parser');\n\nmodule.exports = function(html, opts) {\n  opts = opts || {};\n  opts.parser = htmlParser;\n  return html2markdown(html, opts);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_html2markdown@1.1.0@html2markdown/index.js\n// module id = ./node_modules/_html2markdown@1.1.0@html2markdown/index.js\n// module chunks = 9","/*\n * HTML Parser By John Resig (ejohn.org)\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n *\n * // Use like so:\n * HTMLParser(htmlString, {\n *     start: function(tag, attrs, unary) {},\n *     end: function(tag) {},\n *     chars: function(text) {},\n *     comment: function(text) {}\n * });\n *\n * // or to get an XML string:\n * HTMLtoXML(htmlString);\n *\n * // or to get an XML DOM Document\n * HTMLtoDOM(htmlString);\n *\n * // or to inject into an existing document/DOM node\n * HTMLtoDOM(htmlString, document);\n * HTMLtoDOM(htmlString, document.body);\n *\n */\n\n/*\n Universal JavaScript Module, supports AMD (RequireJS), Node.js, and the browser.\n https://gist.github.com/kirel/1268753\n*/\n\n(function (name, definition) {\n  if (typeof define === 'function') { // AMD\n    define(definition);\n  } else if (typeof module !== 'undefined' && module.exports) { // Node.js\n    module.exports = definition();\n  } else { // Browser\n    var theModule = definition(), global = this, old = global[name];\n    theModule.noConflict = function () {\n      global[name] = old;\n      return theModule;\n    };\n    global[name] = theModule;\n  }\n})('markdownHTMLParser', function() {\n\n\t// Regular Expressions for parsing tags and attributes\n\tvar startTag = /^<(\\w+)((?:\\s+\\w+(?:\\s*=\\s*(?:(?:\"[^\"]*\")|(?:'[^']*')|[^>\\s]+))?)*)\\s*(\\/?)>/,\n\t\tendTag = /^<\\/(\\w+)[^>]*>/,\n\t\tattr = /(\\w+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|([^>\\s]+)))?/g;\n\n\t// Empty Elements - HTML 4.01\n\tvar empty = makeMap(\"area,base,basefont,br,col,frame,hr,img,input,isindex,link,meta,param,embed\");\n\n\t// Block Elements - HTML 4.01\n\tvar block = makeMap(\"address,applet,blockquote,button,center,dd,del,dir,div,dl,dt,fieldset,form,frameset,hr,iframe,ins,isindex,li,map,menu,noframes,noscript,object,ol,p,pre,script,table,tbody,td,tfoot,th,thead,tr,ul\");\n\n\t// Inline Elements - HTML 4.01\n\tvar inline = makeMap(\"a,abbr,acronym,applet,b,basefont,bdo,big,br,button,cite,code,del,dfn,em,font,i,iframe,img,input,ins,kbd,label,map,object,q,s,samp,script,select,small,span,strike,strong,sub,sup,textarea,tt,u,var\");\n\n\t// Elements that you can, intentionally, leave open\n\t// (and which close themselves)\n\tvar closeSelf = makeMap(\"colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr\");\n\n\t// Attributes that have their values filled in disabled=\"disabled\"\n\tvar fillAttrs = makeMap(\"checked,compact,declare,defer,disabled,ismap,multiple,nohref,noresize,noshade,nowrap,readonly,selected\");\n\n\t// Special Elements (can contain anything)\n\tvar special = makeMap(\"script,style\");\n\n\tfunction HTMLParser( html, handler ) {\n\t\tvar index, chars, match, stack = [], last = html;\n\t\tstack.last = function(){\n\t\t\treturn this[ this.length - 1 ];\n\t\t};\n\n\t\twhile ( html ) {\n\t\t\tchars = true;\n\n\t\t\t// Make sure we're not in a script or style element\n\t\t\tif ( !stack.last() || !special[ stack.last() ] ) {\n\n\t\t\t\t// Comment\n\t\t\t\tif ( html.indexOf(\"<!--\") == 0 ) {\n\t\t\t\t\tindex = html.indexOf(\"-->\");\n\n\t\t\t\t\tif ( index >= 0 ) {\n\t\t\t\t\t\tif ( handler.comment )\n\t\t\t\t\t\t\thandler.comment( html.substring( 4, index ) );\n\t\t\t\t\t\thtml = html.substring( index + 3 );\n\t\t\t\t\t\tchars = false;\n\t\t\t\t\t}\n\n\t\t\t\t// end tag\n\t\t\t\t} else if ( html.indexOf(\"</\") == 0 ) {\n\t\t\t\t\tmatch = html.match( endTag );\n\n\t\t\t\t\tif ( match ) {\n\t\t\t\t\t\thtml = html.substring( match[0].length );\n\t\t\t\t\t\tmatch[0].replace( endTag, parseEndTag );\n\t\t\t\t\t\tchars = false;\n\t\t\t\t\t}\n\n\t\t\t\t// start tag\n\t\t\t\t} else if ( html.indexOf(\"<\") == 0 ) {\n\t\t\t\t\tmatch = html.match( startTag );\n\n\t\t\t\t\tif ( match ) {\n\t\t\t\t\t\thtml = html.substring( match[0].length );\n\t\t\t\t\t\tmatch[0].replace( startTag, parseStartTag );\n\t\t\t\t\t\tchars = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( chars ) {\n\t\t\t\t\tindex = html.indexOf(\"<\");\n\n\t\t\t\t\tvar text = index < 0 ? html : html.substring( 0, index );\n\t\t\t\t\thtml = index < 0 ? \"\" : html.substring( index );\n\n\t\t\t\t\tif ( handler.chars )\n\t\t\t\t\t\thandler.chars( text );\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\thtml = html.replace(new RegExp(\"(.*)<\\/\" + stack.last() + \"[^>]*>\"), function(all, text){\n\t\t\t\t\ttext = text.replace(/<!--(.*?)-->/g, \"$1\")\n\t\t\t\t\t\t.replace(/<!\\[CDATA\\[(.*?)]]>/g, \"$1\");\n\n\t\t\t\t\tif ( handler.chars )\n\t\t\t\t\t\thandler.chars( text );\n\n\t\t\t\t\treturn \"\";\n\t\t\t\t});\n\n\t\t\t\tparseEndTag( \"\", stack.last() );\n\t\t\t}\n\n\t\t\tif ( html == last )\n\t\t\t\tthrow \"Parse Error: \" + html;\n\t\t\tlast = html;\n\t\t}\n\n\t\t// Clean up any remaining tags\n\t\tparseEndTag();\n\n\t\tfunction parseStartTag( tag, tagName, rest, unary ) {\n\t\t\tif ( block[ tagName ] ) {\n\t\t\t\twhile ( stack.last() && inline[ stack.last() ] ) {\n\t\t\t\t\tparseEndTag( \"\", stack.last() );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( closeSelf[ tagName ] && stack.last() == tagName ) {\n\t\t\t\tparseEndTag( \"\", tagName );\n\t\t\t}\n\n\t\t\tunary = empty[ tagName ] || !!unary;\n\n\t\t\tif ( !unary )\n\t\t\t\tstack.push( tagName );\n\n\t\t\tif ( handler.start ) {\n\t\t\t\tvar attrs = [];\n\n\t\t\t\trest.replace(attr, function(match, name) {\n\t\t\t\t\tvar value = arguments[2] ? arguments[2] :\n\t\t\t\t\t\targuments[3] ? arguments[3] :\n\t\t\t\t\t\targuments[4] ? arguments[4] :\n\t\t\t\t\t\tfillAttrs[name] ? name : \"\";\n\n\t\t\t\t\tattrs.push({\n\t\t\t\t\t\tname: name,\n\t\t\t\t\t\tvalue: value,\n\t\t\t\t\t\tescaped: value.replace(/(^|[^\\\\])\"/g, '$1\\\\\\\"') //\"\n\t\t\t\t\t});\n\t\t\t\t});\n\n\t\t\t\tif ( handler.start )\n\t\t\t\t\thandler.start( tagName, attrs, unary );\n\t\t\t}\n\t\t}\n\n\t\tfunction parseEndTag( tag, tagName ) {\n\t\t\t// If no tag name is provided, clean shop\n\t\t\tif ( !tagName )\n\t\t\t\tvar pos = 0;\n\n\t\t\t// Find the closest opened tag of the same type\n\t\t\telse\n\t\t\t\tfor ( var pos = stack.length - 1; pos >= 0; pos-- )\n\t\t\t\t\tif ( stack[ pos ] == tagName )\n\t\t\t\t\t\tbreak;\n\n\t\t\tif ( pos >= 0 ) {\n\t\t\t\t// Close all the open elements, up the stack\n\t\t\t\tfor ( var i = stack.length - 1; i >= pos; i-- )\n\t\t\t\t\tif ( handler.end )\n\t\t\t\t\t\thandler.end( stack[ i ] );\n\n\t\t\t\t// Remove the open elements from the stack\n\t\t\t\tstack.length = pos;\n\t\t\t}\n\t\t}\n\t};\n\n\tthis.HTMLtoXML = function( html ) {\n\t\tvar results = \"\";\n\n\t\tHTMLParser(html, {\n\t\t\tstart: function( tag, attrs, unary ) {\n\t\t\t\tresults += \"<\" + tag;\n\n\t\t\t\tfor ( var i = 0; i < attrs.length; i++ )\n\t\t\t\t\tresults += \" \" + attrs[i].name + '=\"' + attrs[i].escaped + '\"';\n\n\t\t\t\tresults += (unary ? \"/\" : \"\") + \">\";\n\t\t\t},\n\t\t\tend: function( tag ) {\n\t\t\t\tresults += \"</\" + tag + \">\";\n\t\t\t},\n\t\t\tchars: function( text ) {\n\t\t\t\tresults += text;\n\t\t\t},\n\t\t\tcomment: function( text ) {\n\t\t\t\tresults += \"<!--\" + text + \"-->\";\n\t\t\t}\n\t\t});\n\n\t\treturn results;\n\t};\n\n\tthis.HTMLtoDOM = function( html, doc ) {\n\t\t// There can be only one of these elements\n\t\tvar one = makeMap(\"html,head,body,title\");\n\n\t\t// Enforce a structure for the document\n\t\tvar structure = {\n\t\t\tlink: \"head\",\n\t\t\tbase: \"head\"\n\t\t};\n\n\t\tif ( !doc ) {\n\t\t\tif ( typeof DOMDocument != \"undefined\" )\n\t\t\t\tdoc = new DOMDocument();\n\t\t\telse if ( typeof document != \"undefined\" && document.implementation && document.implementation.createDocument )\n\t\t\t\tdoc = document.implementation.createDocument(\"\", \"\", null);\n\t\t\telse if ( typeof ActiveX != \"undefined\" )\n\t\t\t\tdoc = new ActiveXObject(\"Msxml.DOMDocument\");\n\n\t\t} else\n\t\t\tdoc = doc.ownerDocument ||\n\t\t\t\tdoc.getOwnerDocument && doc.getOwnerDocument() ||\n\t\t\t\tdoc;\n\n\t\tvar elems = [],\n\t\t\tdocumentElement = doc.documentElement ||\n\t\t\t\tdoc.getDocumentElement && doc.getDocumentElement();\n\n\t\t// If we're dealing with an empty document then we\n\t\t// need to pre-populate it with the HTML document structure\n\t\tif ( !documentElement && doc.createElement ) (function(){\n\t\t\tvar html = doc.createElement(\"html\");\n\t\t\tvar head = doc.createElement(\"head\");\n\t\t\thead.appendChild( doc.createElement(\"title\") );\n\t\t\thtml.appendChild( head );\n\t\t\thtml.appendChild( doc.createElement(\"body\") );\n\t\t\tdoc.appendChild( html );\n\t\t})();\n\n\t\t// Find all the unique elements\n\t\tif ( doc.getElementsByTagName )\n\t\t\tfor ( var i in one )\n\t\t\t\tone[ i ] = doc.getElementsByTagName( i )[0];\n\n\t\t// If we're working with a document, inject contents into\n\t\t// the body element\n\t\tvar curParentNode = one.body;\n\n\t\tHTMLParser( html, {\n\t\t\tstart: function( tagName, attrs, unary ) {\n\t\t\t\t// If it's a pre-built element, then we can ignore\n\t\t\t\t// its construction\n\t\t\t\tif ( one[ tagName ] ) {\n\t\t\t\t\tcurParentNode = one[ tagName ];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar elem = doc.createElement( tagName );\n\n\t\t\t\tfor ( var attr in attrs )\n\t\t\t\t\telem.setAttribute( attrs[ attr ].name, attrs[ attr ].value );\n\n\t\t\t\tif ( structure[ tagName ] && typeof one[ structure[ tagName ] ] != \"boolean\" )\n\t\t\t\t\tone[ structure[ tagName ] ].appendChild( elem );\n\n\t\t\t\telse if ( curParentNode && curParentNode.appendChild )\n\t\t\t\t\tcurParentNode.appendChild( elem );\n\n\t\t\t\tif ( !unary ) {\n\t\t\t\t\telems.push( elem );\n\t\t\t\t\tcurParentNode = elem;\n\t\t\t\t}\n\t\t\t},\n\t\t\tend: function( tag ) {\n\t\t\t\telems.length -= 1;\n\n\t\t\t\t// Init the new parentNode\n\t\t\t\tcurParentNode = elems[ elems.length - 1 ];\n\t\t\t},\n\t\t\tchars: function( text ) {\n\t\t\t\tcurParentNode.appendChild( doc.createTextNode( text ) );\n\t\t\t},\n\t\t\tcomment: function( text ) {\n\t\t\t\t// create comment node\n\t\t\t}\n\t\t});\n\n\t\treturn doc;\n\t};\n\n\tfunction makeMap(str){\n\t\tvar obj = {}, items = str.split(\",\");\n\t\tfor ( var i = 0; i < items.length; i++ )\n\t\t\tobj[ items[i] ] = true;\n\t\treturn obj;\n\t}\n\n\treturn HTMLParser;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/_html2markdown@1.1.0@html2markdown/markdown_html_parser.js\n// module id = ./node_modules/_html2markdown@1.1.0@html2markdown/markdown_html_parser.js\n// module chunks = 9"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AACA;AAUA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AACA;AACA;AAFA;AACA;AAKA;AACA;AAAA;AACA;AAVA;AAWA;AACA;;;AACA;AAAA;AAAA;AAGA;AACA;AADA;AAGA;;;AACA;AACA;AACA;AADA;AAGA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AADA;AAGA;AACA;AACA;AADA;AAGA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlBA;AAAA;AAAA;AA6CA;;;;AA/GA;AACA;AAkljsourceRoot":""}